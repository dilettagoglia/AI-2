from data_structure import gameStatus
from data_structure.gameStatus import *


def lowLevelStrategy(self, endx, endy):
    # Here self refers to karen
    """
    Basic strategy function
    :return: the next action(s) that the players have to do.
    """
    # Array di coppie <action,direction>     (i.e. <move, N> , <shoot,E> ...)
    nextActions = []
    try:
        direction, coordinates = self.me.movement.move(gameStatus.game.weightedMap, self.me, endx, endy)
    except():
        print("Exception generated by movement.move")
        return nextActions

    # se sto in linea con altri, sparo
    for key in gameStatus.game.enemies:
        enemy = gameStatus.game.enemies.get(key)

        if enemy.state == "ACTIVE" and gameStatus.game.weightedMap[self.me.y][self.me.x] == int(self.maxWeight / 2):
            if self.me.x == enemy.x:
                if self.me.y > enemy.y:
                    nextActions.append(("shoot", "N"))
                else:
                    nextActions.append(("shoot", "S"))
            elif self.me.y == enemy.y:

                if self.me.x > enemy.x:
                    nextActions.append(("shoot", "W"))
                else:
                    nextActions.append(("shoot", "E"))

    # controllo se andrò in linea di tiro
    if direction == "E" and gameStatus.game.weightedMap[self.me.y][self.me.x + 1] == int(self.maxWeight / 2):

        # my x becomes  x+1
        if gameStatus.game.serverMap[self.me.y][self.me.x + 1] == "~":
            nextActions.append(("move", direction))

        else:
            for key in gameStatus.game.enemies:
                enemy = gameStatus.game.enemies.get(key)

                if enemy.x == self.me.x + 1:

                    if enemy.y >= self.me.y:
                        # muoviti ad est e spara a sud
                        nextActions.append(("move", direction))
                        nextActions.append(("shoot", "S"))

                    if enemy.y < self.me.y:
                        # muoviti ad est e spara a nord
                        nextActions.append(("move", direction))
                        nextActions.append(("shoot", "N"))


    elif direction == "W" and gameStatus.game.weightedMap[self.me.y][self.me.x - 1] == int(self.maxWeight / 2):

        # my x becomes  x-1
        if gameStatus.game.serverMap[self.me.y][self.me.x - 1] == "~":
            nextActions.append(("move", direction))
        else:
            for key in gameStatus.game.enemies:
                enemy = gameStatus.game.enemies.get(key)

                if enemy.x == self.me.x - 1:

                    if enemy.y >= self.me.y:
                        # muoviti ad ovest e spara a sud
                        nextActions.append(("move", direction))
                        nextActions.append(("shoot", "S"))

                    if enemy.y < self.me.y:
                        # muoviti ad ovest e spara a nord
                        nextActions.append(("move", direction))
                        nextActions.append(("shoot", "N"))


    elif direction == "S" and gameStatus.game.weightedMap[self.me.y + 1][self.me.x] == int(self.maxWeight / 2):

        # my y becomes  y+1
        if gameStatus.game.serverMap[self.me.y + 1][self.me.x] == "~":
            nextActions.append(("move", direction))
        else:
            for key in gameStatus.game.enemies.keys():
                enemy = gameStatus.game.enemies.get(key)

                if enemy.y == self.me.y + 1:

                    if enemy.x >= self.me.x:
                        nextActions.append(("move", direction))
                        nextActions.append(("shoot", "E"))

                    if enemy.x < self.me.x:
                        # muoviti a sud e spara ad ovest
                        nextActions.append(("move", direction))
                        nextActions.append(("shoot", "W"))



    elif direction == "N" and gameStatus.game.weightedMap[self.me.y - 1][self.me.x] == int(self.maxWeight / 2):

        # my y becomes  y-1
        if gameStatus.game.serverMap[self.me.y - 1][self.me.x] == "~":
            nextActions.append(("move", direction))

        else:
            for key in gameStatus.game.enemies:
                enemy = gameStatus.game.enemies.get(key)

                if enemy.y == self.me.y - 1:

                    if enemy.x > self.me.x:
                        # muoviti ad nord e spara ad est
                        nextActions.append(("move", direction))
                        nextActions.append(("shoot", "E"))

                    if enemy.x < self.me.x:
                        # muoviti a nord e spara ad ovest
                        nextActions.append(("move", direction))
                        nextActions.append(("shoot", "W"))


    # Non sono andato in linea di tiro
    else:
        nextActions.append(("move", direction))

    return nextActions


def lowLevelStrategyImpostor(self, endx, endy):
    # Here self refers to karen
    """
    Basic strategy function
    :return: the next action(s) that the players have to do.
    """
    # Array di coppie <action,direction>     (i.e. <move, N> , <shoot,E> ...)
    nextActions = []
    try:
        direction, coordinates = self.me.movement.move(gameStatus.game.weightedMap, self.me, endx, endy)
    except():
        print("Exception generated by movement.move")
        return nextActions

    # Controllo quanti alleati sono ancora in vita. Se sono pochi allora inizio a sparare loro
    activeAllies = 0
    for key in gameStatus.game.allies:
        if gameStatus.game.allies.get(key).state == "ACTIVE":
            activeAllies += 1

    # se sto in linea con altri, sparo
    if activeAllies < len(gameStatus.game.allies)/3:
        for key in gameStatus.game.allies:
            ally = gameStatus.game.allies.get(key)

            if ally.state == "ACTIVE" and gameStatus.game.weightedMap[self.me.y][self.me.x] == int(self.maxWeight / 2):
                if self.me.x == ally.x:
                    if self.me.y > ally.y:
                        nextActions.append(("shoot", "N"))
                    else:
                        nextActions.append(("shoot", "S"))
                elif self.me.y == ally.y:

                    if self.me.x > ally.x:
                        nextActions.append(("shoot", "W"))
                    else:
                        nextActions.append(("shoot", "E"))

        # controllo se andrò in linea di tiro
        if direction == "E" and gameStatus.game.weightedMap[self.me.y][self.me.x + 1] == int(self.maxWeight / 2):

            # my x becomes  x+1
            if gameStatus.game.serverMap[self.me.y][self.me.x + 1] == "~":
                nextActions.append(("move", direction))

            else:
                for key in gameStatus.game.enemies:
                    ally = gameStatus.game.enemies.get(key)

                    if ally.x == self.me.x + 1:

                        if ally.y >= self.me.y:
                            # muoviti ad est e spara a sud
                            nextActions.append(("move", direction))
                            nextActions.append(("shoot", "S"))

                        if ally.y < self.me.y:
                            # muoviti ad est e spara a nord
                            nextActions.append(("move", direction))
                            nextActions.append(("shoot", "N"))


        elif direction == "W" and gameStatus.game.weightedMap[self.me.y][self.me.x - 1] == int(self.maxWeight / 2):

            # my x becomes  x-1
            if gameStatus.game.serverMap[self.me.y][self.me.x - 1] == "~":
                nextActions.append(("move", direction))
            else:
                for key in gameStatus.game.enemies:
                    ally = gameStatus.game.enemies.get(key)

                    if ally.x == self.me.x - 1:

                        if ally.y >= self.me.y:
                            # muoviti ad ovest e spara a sud
                            nextActions.append(("move", direction))
                            nextActions.append(("shoot", "S"))

                        if ally.y < self.me.y:
                            # muoviti ad ovest e spara a nord
                            nextActions.append(("move", direction))
                            nextActions.append(("shoot", "N"))


        elif direction == "S" and gameStatus.game.weightedMap[self.me.y + 1][self.me.x] == int(self.maxWeight / 2):

            # my y becomes  y+1
            if gameStatus.game.serverMap[self.me.y + 1][self.me.x] == "~":
                nextActions.append(("move", direction))
            else:
                for key in gameStatus.game.enemies.keys():
                    ally = gameStatus.game.enemies.get(key)

                    if ally.y == self.me.y + 1:

                        if ally.x >= self.me.x:
                            nextActions.append(("move", direction))
                            nextActions.append(("shoot", "E"))

                        if ally.x < self.me.x:
                            # muoviti a sud e spara ad ovest
                            nextActions.append(("move", direction))
                            nextActions.append(("shoot", "W"))



        elif direction == "N" and gameStatus.game.weightedMap[self.me.y - 1][self.me.x] == int(self.maxWeight / 2):

            # my y becomes  y-1
            if gameStatus.game.serverMap[self.me.y - 1][self.me.x] == "~":
                nextActions.append(("move", direction))

            else:
                for key in gameStatus.game.enemies:
                    ally = gameStatus.game.enemies.get(key)

                    if ally.y == self.me.y - 1:

                        if ally.x > self.me.x:
                            # muoviti ad nord e spara ad est
                            nextActions.append(("move", direction))
                            nextActions.append(("shoot", "E"))

                        if ally.x < self.me.x:
                            # muoviti a nord e spara ad ovest
                            nextActions.append(("move", direction))
                            nextActions.append(("shoot", "W"))


        # Non sono andato in linea di tiro
        else:
            nextActions.append(("move", direction))
    else:
        nextActions.append(("move", direction))
    return nextActions
